Exercise 1: Control Structures


Scenario 1: Apply 1% discount to loan interest rates for customers above 60 years


BEGIN
  FOR rec IN (SELECT LoanID, InterestRate, c.DOB 
              FROM Loans l 
              JOIN Customers c ON l.CustomerID = c.CustomerID) 
  LOOP
    IF MONTHS_BETWEEN(SYSDATE, rec.DOB) / 12 > 60 THEN
      UPDATE Loans 
      SET InterestRate = InterestRate - 1 
      WHERE LoanID = rec.LoanID;
    END IF;
  END LOOP;
END;


Scenario 2: Promote customers with balance over \$10,000 to VIP status


BEGIN
  FOR rec IN (SELECT CustomerID, Balance FROM Customers) 
  LOOP
    IF rec.Balance > 10000 THEN
      UPDATE Customers 
      SET IsVIP = 'TRUE' 
      WHERE CustomerID = rec.CustomerID;
    END IF;
  END LOOP;
END;


Scenario 3: Send reminders for loans due within next 30 days


DECLARE
  v_due_date Loans.EndDate%TYPE;
BEGIN
  FOR rec IN (SELECT l.LoanID, c.Name, l.EndDate 
              FROM Loans l 
              JOIN Customers c ON l.CustomerID = c.CustomerID
              WHERE l.EndDate <= SYSDATE + 30) 
  LOOP
    DBMS_OUTPUT.PUT_LINE('Reminder: Loan ID ' || rec.LoanID || 
                         ' for customer ' || rec.Name || 
                         ' is due on ' || TO_CHAR(rec.EndDate, 'YYYY-MM-DD'));
  END LOOP;
END;




Exercise 3: Stored Procedures



Scenario 1: Process monthly interest for savings accounts


CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
BEGIN
  FOR rec IN (SELECT AccountID, Balance 
              FROM Accounts 
              WHERE AccountType = 'Savings') 
  LOOP
    UPDATE Accounts 
    SET Balance = Balance + (Balance * 0.01),
        LastModified = SYSDATE
    WHERE AccountID = rec.AccountID;
  END LOOP;
END;



Scenario 2: Bonus for employees based on performance (by department)


CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus (
  p_Department IN VARCHAR2,
  p_BonusPercent IN NUMBER
) IS
BEGIN
  UPDATE Employees
  SET Salary = Salary + (Salary * (p_BonusPercent / 100))
  WHERE Department = p_Department;
END;




Scenario 3: Transfer funds between customer accounts


CREATE OR REPLACE PROCEDURE TransferFunds (
  p_SourceAccountID IN NUMBER,
  p_TargetAccountID IN NUMBER,
  p_Amount IN NUMBER
) IS
  v_balance NUMBER;
BEGIN
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_SourceAccountID;

  IF v_balance >= p_Amount THEN
    UPDATE Accounts 
    SET Balance = Balance - p_Amount, LastModified = SYSDATE 
    WHERE AccountID = p_SourceAccountID;

    UPDATE Accounts 
    SET Balance = Balance + p_Amount, LastModified = SYSDATE 
    WHERE AccountID = p_TargetAccountID;

    -- Optionally insert into Transactions table
    INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (TRANSACTIONS_SEQ.NEXTVAL, p_SourceAccountID, SYSDATE, p_Amount, 'Transfer');

    INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (TRANSACTIONS_SEQ.NEXTVAL, p_TargetAccountID, SYSDATE, p_Amount, 'Transfer');
    
  ELSE
    RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in source account.');
  END IF;
END;

